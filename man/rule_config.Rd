% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debugger_rules_builtin_rules.R
\name{rule_config}
\alias{rule_config}
\alias{vanishing_gradient}
\alias{similar_across_runs}
\alias{weight_update_ratio}
\alias{all_zero}
\alias{exploding_tensor}
\alias{unchanged_tensor}
\alias{loss_not_decreasing}
\alias{check_input_images}
\alias{dead_relu}
\alias{confusion}
\alias{tree_depth}
\alias{class_imbalance}
\alias{overfit}
\alias{tensor_variance}
\alias{overtraining}
\alias{poor_weight_initialization}
\alias{saturated_activation}
\alias{nlp_sequence_ratio}
\alias{stalled_training_rule}
\alias{feature_importance_overweight}
\alias{create_xgboost_report}
\title{List of Debugger Built-in Rules}
\usage{
vanishing_gradient()

similar_across_runs()

weight_update_ratio()

all_zero()

exploding_tensor()

unchanged_tensor()

loss_not_decreasing()

check_input_images()

dead_relu()

confusion()

tree_depth()

class_imbalance()

overfit()

tensor_variance()

overtraining()

poor_weight_initialization()

saturated_activation()

nlp_sequence_ratio()

stalled_training_rule()

feature_importance_overweight()

create_xgboost_report()
}
\value{
list to be used in Amazon SageMaker Debugger
}
\description{
Use the Debugger built-in rules provided by Amazon SageMaker Debugger
             and analyze tensors emitted while training your models. The Debugger
             built-in rules monitor various common conditions that are critical for
             the success of a training job. You can call the built-in rules using
             Amazon SageMaker Python SDK or the low-level SageMaker API operations.
             Depending on deep learning frameworks of your choice, there are four
             scopes of validity for the built-in rules as shown in the following table.
             \url{https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-built-in-rules.html}
}
